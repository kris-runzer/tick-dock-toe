// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x6d\x73\xdb\xb8\x11\xfe\xae\x5f\xb1\xc6\x65\x86\xf2\x54\x14\xe3\x97\x5e\x52\x45\x54\xc7\xb5\x53\x27\xbe\xf6\x92\xda\x3e\xbf\x8c\xc7\x1f\x20\x72\x45\xc2\x06\x01\x16\x00\x49\xa9\x1a\xfd\xf7\x0e\x48\x51\x96\x2c\x4a\xb6\x33\xbd\xe9\xe9\x8b\x81\xc5\x62\xf7\x59\xec\x03\xec\xd2\xfd\x9d\x93\x6f\xc7\x97\xb7\xdf\x3f\x43\x6c\x12\x3e\x68\xf5\xed\x1f\xe0\x54\x44\x3e\x41\x41\x40\x44\x2e\x4d\x53\x9f\x5c\xb2\xe0\xf1\x44\x06\x8f\x97\x12\xc9\xa0\xd5\xea\xc7\x48\xc3\x41\x0b\x00\xa0\x9f\xa0\xa1\x10\xc4\x54\x69\x34\x3e\xc9\xcc\xc8\xfd\x48\x96\x97\x62\x63\x52\x17\xff\x9d\xb1\xdc\x27\x37\xee\x6f\x47\xee\xb1\x4c\x52\x6a\xd8\x90\x23\x81\x40\x0a\x83\xc2\xf8\xe4\xeb\x67\x1f\xc3\x08\x57\x76\x0a\x9a\xa0\x4f\x72\x86\x45\x2a\x95\x59\x52\x2e\x58\x68\x62\x3f\xc4\x9c\x05\xe8\x96\x93\x0e\x30\xc1\x0c\xa3\xdc\xd5\x01\xe5\xe8\xef\x59\x94\xa5\x25\xc3\x0c\xc7\x81\xc5\xef\xda\x00\xdc\x4b\x89\x7d\xaf\x12\xce\x35\x38\x13\x8f\xa0\x90\xfb\x44\x9b\x09\x47\x1d\x23\x1a\x02\xb1\xc2\x91\x4f\x2c\x78\xdd\xf3\xbc\x84\x8e\x83\x50\x74\x87\x52\x1a\x6d\x14\x4d\xed\x24\x90\x89\xb7\x10\x78\x07\xdd\x83\xee\x07\x2f\xd0\xfa\x49\xd6\x4d\x98\xe8\x06\x5a\x13\x60\xc2\x60\xa4\x98\x99\xf8\x44\xc7\xf4\xe0\xe3\xa1\xfb\xb7\xab\x5b\xc6\x2e\xbe\xfe\x1d\x7f\xd9\x0b\x4f\x93\xb3\xf3\xa3\xc7\x49\x90\x7d\x39\xfa\x72\x1e\x1d\xec\x7f\x4b\x7e\x0b\x8a\xe2\x83\x14\x07\xe7\xb7\x61\x74\x78\x45\xff\xf4\x3d\xb9\xb8\xd4\xff\xf1\x7e\xf9\xf9\x63\x3e\x0c\x3f\x3f\xc4\x87\x19\x81\x40\x49\xad\xa5\x62\x11\x13\x3e\xa1\x42\x8a\x49\x22\x33\x5d\x1f\xe0\xef\x16\x94\x6b\x62\x4c\x70\x5b\x68\xea\xcb\x44\xfe\xba\xc7\xce\xf5\xd5\xcd\xd5\xa1\x38\x79\x7f\x96\x19\x2e\x4e\xa9\xe6\xc7\x67\xd9\xf1\x87\xac\x78\x08\xb3\xeb\xbf\x5c\x5c\xa9\x7f\xe4\xe7\xb7\x52\x7e\x4f\xf7\x87\xd7\xb7\x51\x12\x9d\xfd\xeb\xeb\x4d\xc1\xbd\x8b\xf4\xa5\xd0\xca\x80\xaa\xb1\xfd\x0d\x65\x38\x81\x29\xa4\x34\x0c\x99\x88\x5c\x23\xd3\x1e\x7c\x78\x9f\x8e\x3f\xc1\xac\xb5\x50\xea\x06\xc8\x39\x4c\xa1\x24\x4b\x0f\x0e\xcb\xf5\x18\x59\x14\x9b\x7a\x96\x50\x15\x31\xd1\x83\x3f\x3f\xdf\xaa\x64\xe1\xea\x94\x06\x4c\x44\x30\x9d\xab\x55\x6e\xf6\xe7\x6e\x4a\x58\xde\x1c\xd7\x1c\x64\xa0\x58\x6a\xc0\x4c\x52\xf4\x89\xc1\xb1\xf1\x1e\x68\x4e\x2b\x29\x01\xad\x82\xa7\x34\xd0\x07\x3a\xee\x46\x52\x46\x1c\x69\xca\x74\x99\x02\x2b\xf3\x38\x1b\x6a\x8f\x8a\x28\xe3\x54\x3d\x68\x6f\xaf\xfb\x73\xf7\xa0\x9e\x97\x09\x78\xd0\x64\xd0\xf7\x2a\xa3\x83\x57\xf8\x7d\x3a\xb4\x9c\x2a\x88\x68\x82\xe0\xc3\xc2\xa0\x0c\x33\x8e\x6d\x67\xe9\xaa\x3b\x1d\xb8\xbb\xdf\x7d\x3a\x0a\xbb\xa3\x6b\x6f\xa1\x92\x9c\xa3\x6a\x3b\xa7\x34\xc1\x63\xa3\xb8\x55\x74\xde\xe9\x40\xa6\x76\x8f\xf3\xce\x86\x56\x0e\x0a\x26\x42\x59\x38\x1d\x18\x65\x22\x30\x4c\x8a\x76\xa5\xd5\x81\x52\xa7\x03\x73\x8d\x5d\x98\x2e\xbc\xd8\x5f\xa5\xd5\xd5\x86\x1a\x8b\x71\x3a\xfb\xd4\xb4\x1c\x32\x4d\x87\x1c\x43\xf0\x61\x44\xb9\xc6\x4f\xad\x55\x2d\xeb\xa2\x1b\xa1\x69\x3b\x5e\x69\xc9\xd9\xed\x9a\x18\x45\x7b\x45\xcb\xfe\x16\xe8\x14\xea\x54\x0a\x8d\xcf\xf1\x6c\xc0\x55\xab\x77\x43\x6a\xe8\xa7\xb5\x1d\xb3\xce\x66\x4f\x1b\x3d\x54\x07\xd2\xa5\x1c\x95\x69\x3b\x17\x32\x41\x13\x5b\xea\x0d\x95\x7c\xc4\x1d\x67\x77\xdd\xcb\x8a\x64\xf7\xf9\x21\x54\x88\xdf\x15\xd4\x04\x71\xdb\x29\x91\x97\xf8\x33\xbd\x9c\x96\x9c\xf2\x26\x44\x6c\x04\xed\x9a\x20\x4c\x9f\xe0\x88\x09\x0c\x4b\xe5\x4d\xf8\xed\x8e\x9c\x72\xd8\xf1\xc1\xa1\x9c\xe5\xe8\x6c\xd2\x84\xc6\x44\x1a\x95\xe1\xfa\x49\xae\xc7\xb9\x2e\x99\x6d\x08\x3d\xa1\x8f\xf8\x4f\x99\xdb\x7c\x2d\xc2\x1d\x77\x60\xd2\x84\xcb\xde\x8b\x44\x86\xc8\x2d\xe9\x1a\x51\x38\x63\xa7\x07\xe3\xf5\xc4\x96\x6b\x13\xa7\x07\x93\xf5\xb5\x59\x6b\x4d\x54\x71\x33\xcd\x2c\x37\x13\x99\xdb\x6b\x53\xfa\xdd\xc4\x50\x78\x0b\x4b\xe1\xcd\x4c\x85\x66\xb6\xc2\x6b\x18\x0b\x3f\xc4\x5a\x68\xcc\xe8\xaa\xde\xac\x31\x9f\x02\x8b\xd3\xea\xe9\xda\x0a\xcd\x12\x71\xa7\xc6\x15\x48\x31\x62\x2a\x69\x3b\x47\x0a\x61\x22\x33\xd0\xd9\x7c\x50\x30\x1d\x83\x91\xa0\x0d\x55\x06\x28\x08\x2c\xca\x77\xee\xaf\xce\x46\x8a\x2b\x34\x99\x12\x0d\xd7\x7d\x63\x9a\xa5\xb6\x79\x16\x58\x6c\x7c\x81\xe0\xf7\xcf\x2f\x6c\x7b\x38\x9b\x94\xff\x88\x84\x58\x8c\xee\x77\xeb\xb2\x3b\x2f\x7f\x7d\xaf\x6a\x4a\x5b\xfd\xb2\x23\x10\x91\xfb\x54\xa9\x7c\x52\x57\xaa\xba\x89\x08\x59\x0e\x01\xa7\x5a\xfb\x44\xd0\x7c\x48\x15\x54\x7f\x5c\x26\x72\x54\x1a\xeb\xe9\x88\x8d\x31\xb4\xd5\x7e\xa9\x78\x2e\x6f\xb6\x3e\x28\x13\xa8\x96\xd6\x9b\x1d\xb8\x16\xde\x9a\x5e\xa9\x4b\x9f\x69\x0e\x15\x15\x61\xdd\xad\xfd\x44\x06\xd7\xc8\x03\x99\xa0\xa5\x69\xd9\xc8\x12\x5b\x9f\x89\x6d\x65\x77\xfa\x1e\x7d\xe6\xd8\x0b\x59\xbe\x84\xf5\x69\x3a\x1f\xae\xc5\xbf\x08\x01\xca\xd6\xce\xd5\xb1\x2c\x02\xaa\x91\x80\x92\x1c\x7d\x92\x50\x26\x36\x44\xaf\x64\xb1\x25\xee\x40\x72\x57\x27\xae\x1c\x8d\x34\x1a\xf7\x10\xe6\xf3\x43\xb0\x7d\x89\x1b\xa0\x30\xcd\xc7\x61\x4d\x88\xc8\x55\x98\x22\x35\x3e\x99\x00\x13\x70\xf7\xbe\x03\x7b\x1d\xd8\xbf\x6f\xd8\x50\x6e\xd2\x29\x15\xcb\xbb\xc6\xaf\xd9\x55\xee\x1c\x66\xc6\x48\x51\x83\x1e\x1a\x01\xb6\x59\x2c\xbf\x7d\x02\xce\x82\x47\x7b\x02\x55\x05\xa9\xca\x46\xb9\x52\xdf\x20\x9f\xd4\x23\xb2\xd1\x83\xfd\x95\xc6\x4a\x07\x53\xe7\xbd\xd3\x03\x67\x68\x84\x1b\xe2\x88\x66\xdc\xd8\x4e\x69\xaf\x96\x31\x31\x92\x56\xb0\x5f\x0b\x74\x16\x04\xa8\xb5\x33\xbb\xab\x6a\xf7\x50\x52\x15\xde\x8d\xef\xef\x26\xf7\xdb\xc2\x5a\x39\x14\x5d\x30\x13\xc4\xf6\x5b\xe0\x99\x85\x17\x0c\x34\x18\x71\x8b\x18\x85\x4f\xf6\xc8\xe0\xa6\xef\xd9\xa5\x1f\xb5\xb0\x4f\x06\xdf\x7e\xd4\xc2\xfc\xe0\xaa\x9c\x0d\x5e\x63\xe5\x25\x9d\xbe\x57\xd1\x60\x0b\xbb\x1a\x98\xba\x7a\xd7\x1a\x44\xcb\x77\x0e\xd6\x2f\x0f\x2c\x7d\x5b\xfc\xef\x2f\xd2\x71\xa6\x14\x0a\x03\x97\x99\x12\xbd\x75\xf0\xda\x28\x29\xa2\x75\x7a\xa4\x9c\x4e\x1a\xed\xc1\x16\x36\xd4\x50\x4b\x44\x96\xc3\x2f\xf0\x63\x13\x27\x56\xec\xcc\xa9\xbf\x85\x28\xf6\xab\xcb\x46\xd1\xb0\xd2\xcc\xfd\xaa\xf3\x7d\x53\x70\x68\xdf\xe2\x65\x58\x21\x15\x91\x3d\xa0\x6b\x26\x04\xaa\x9d\xb7\x87\x19\x2a\x5a\x34\x9b\x3c\x51\xb4\xd8\x68\xb0\x96\xff\x61\x09\x57\x76\xd9\x3f\xf5\x60\x3a\xad\x0e\x5b\x64\x89\x15\xe9\xd9\xec\xff\x07\xb9\xa9\xc0\xac\xbf\xf8\xf6\xa1\x4d\x15\x4b\xa8\x9a\x94\xe3\x21\xb7\x15\x76\xa9\x04\xcc\x9b\xce\xf6\x2e\x19\xfc\x8a\x05\xd8\x71\xf3\x93\xf1\x62\xfd\xed\x7b\xb6\x3f\xb1\x7d\x8a\x57\xfd\xcf\xed\xbf\x01\x00\x00\xff\xff\x8e\x6b\xef\xec\x84\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4996, mode: os.FileMode(436), modTime: time.Unix(1489786057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

