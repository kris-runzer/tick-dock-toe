// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x6d\x73\xdb\xb8\x11\xfe\xae\x5f\xb1\xc6\x65\x86\xf2\x54\x14\xfd\xd6\x24\x55\x44\x75\x52\x3b\xcd\xcb\xb5\x97\xd4\xf6\x39\xf1\x78\xfc\x01\x22\x57\x24\x6c\x10\x60\x01\x90\x94\x4e\xa7\xff\xde\x01\x29\xca\x92\x45\x2a\x71\xa6\x37\x17\x7e\x31\xb1\x58\xec\x3e\xbb\xfb\x80\xbb\xf2\x70\xef\xec\xe3\xe9\xe5\xf5\xa7\x37\x10\x9b\x84\x8f\x3a\x43\xfb\x07\x38\x15\x91\x4f\x50\x10\x10\x91\x4b\xd3\xd4\x27\x97\x2c\xb8\x3f\x93\xc1\xfd\xa5\x44\x32\xea\x74\x86\x31\xd2\x70\xd4\x01\x00\x18\x26\x68\x28\x04\x31\x55\x1a\x8d\x4f\x32\x33\x71\x5f\x92\xf5\xad\xd8\x98\xd4\xc5\xff\x66\x2c\xf7\xc9\x17\xf7\xd7\xd7\xee\xa9\x4c\x52\x6a\xd8\x98\x23\x81\x40\x0a\x83\xc2\xf8\xe4\xfd\x1b\x1f\xc3\x08\x37\x4e\x0a\x9a\xa0\x4f\x72\x86\x45\x2a\x95\x59\x53\x2e\x58\x68\x62\x3f\xc4\x9c\x05\xe8\x96\x8b\x1e\x30\xc1\x0c\xa3\xdc\xd5\x01\xe5\xe8\x1f\x5a\x94\xa5\x25\xc3\x0c\xc7\x91\xc5\xef\xda\x00\xdc\x4b\x89\x43\xaf\x12\x2e\x35\x38\x13\xf7\xa0\x90\xfb\x44\x9b\x19\x47\x1d\x23\x1a\x02\xb1\xc2\x89\x4f\x2c\x78\x3d\xf0\xbc\x84\x4e\x83\x50\xf4\xc7\x52\x1a\x6d\x14\x4d\xed\x22\x90\x89\xb7\x12\x78\xc7\xfd\xe3\xfe\x0b\x2f\xd0\xfa\x41\xd6\x4f\x98\xe8\x07\x5a\x13\x60\xc2\x60\xa4\x98\x99\xf9\x44\xc7\xf4\xf8\xe5\x89\xfb\x8f\xab\x6b\xc6\x2e\xde\xff\x13\x7f\x3e\x0c\xdf\x26\x1f\xce\x5f\xdf\xcf\x82\xec\xdd\xeb\x77\xe7\xd1\xf1\xd1\xc7\xe4\xd7\xa0\x28\x5e\x48\x71\x7c\x7e\x1d\x46\x27\x57\xf4\x2f\x9f\x92\x8b\x4b\xfd\x9b\xf7\xf3\xf3\x97\xf9\x38\x7c\x73\x17\x9f\x64\x04\x02\x25\xb5\x96\x8a\x45\x4c\xf8\x84\x0a\x29\x66\x89\xcc\x74\x9d\xc0\x3f\x2c\x28\xd7\xc4\x98\xe0\xae\xd0\xd4\xbb\x99\xfc\xe5\x90\x9d\xeb\xab\x2f\x57\x27\xe2\xec\xe0\x43\x66\xb8\x78\x4b\x35\x3f\xfd\x90\x9d\xbe\xc8\x8a\xbb\x30\xfb\xfc\xb7\x8b\x2b\xf5\xaf\xfc\xfc\x5a\xca\x4f\xe9\xd1\xf8\xf3\x75\x94\x44\x1f\xfe\xf3\xfe\x4b\xc1\xbd\x8b\xf4\x6b\xa1\x95\x01\x55\xef\xf6\x19\xcb\x70\x06\x73\x48\x69\x18\x32\x11\xb9\x46\xa6\x03\x78\x71\x90\x4e\x5f\xc1\xa2\xb3\x52\xea\x07\xc8\x39\xcc\xa1\x24\xcb\x00\x9e\x97\xfb\x31\xb2\x28\x36\xf5\x2a\xa1\x2a\x62\x62\x00\x7f\xb5\x8b\x89\x14\xc6\xd5\xec\x37\x1c\xc0\xf1\x96\x2d\x25\x0b\x57\xa7\x34\x60\x22\x82\xf9\xf2\x5c\xe5\xf7\x68\xa9\x5b\xe2\xf4\x96\x40\x97\xa8\x03\xc5\x52\x03\x66\x96\xa2\x4f\x0c\x4e\x8d\x77\x47\x73\x5a\x49\x09\x68\x15\x3c\xd4\x85\xde\xd1\x69\x3f\x92\x32\xe2\x48\x53\xa6\xcb\x9a\x58\x99\xc7\xd9\x58\x7b\x54\x44\x19\xa7\xea\x4e\x7b\x87\xfd\xe7\xfd\xe3\x7a\x5d\x56\xe4\x4e\x93\xd1\xd0\xab\x8c\x8e\xbe\xc1\xef\x43\x16\x73\xaa\x20\xa2\x09\x82\x0f\x2b\x83\x32\xcc\x38\x76\x9d\xb5\xbb\xef\xf4\xe0\xe6\x76\xff\x21\x15\xf6\x44\xdf\x5e\x4b\x25\x39\x47\xd5\x75\xde\xd2\x04\x4f\x8d\xe2\x56\xd1\x79\xa6\x03\x99\xda\x33\xce\x33\x1b\x5a\xf9\x52\x30\x11\xca\xc2\xe9\xc1\x24\x13\x81\x61\x52\x74\x2b\xad\x1e\x94\x3a\x3d\x58\x6a\xec\xc3\x7c\xe5\xc5\x3e\x95\x56\x5f\x1b\x6a\x2c\xc6\xf9\xe2\x55\xd3\x76\xc8\x34\x1d\x73\x0c\xc1\x87\x09\xe5\x1a\x5f\x75\x36\xb5\xac\x8b\x7e\x84\xa6\xeb\x78\xa5\x25\x67\xbf\x6f\x62\x14\xdd\x0d\x2d\xfb\xac\xd0\x29\xd4\xa9\x14\x1a\x1f\xe3\x69\xc1\x55\xab\xf7\x43\x6a\xe8\xab\xad\x13\x8b\x5e\xbb\xa7\x56\x0f\x55\x42\xfa\x94\xa3\x32\x5d\xe7\x42\x26\x68\x62\x4b\xbd\xb1\x92\xf7\xb8\xe7\xec\x6f\x7b\xd9\x90\xec\x3f\x4e\x42\x85\xf8\x59\x41\x4d\x10\x77\x9d\x12\x79\x89\x3f\xd3\xeb\x65\xc9\x29\x6f\x42\xc4\x26\xd0\xad\x09\xc2\xf4\x19\x4e\x98\xc0\xb0\x54\x6e\xc3\x6f\x4f\xe4\x94\xc3\x9e\x0f\x0e\xe5\x2c\x47\xa7\x4d\x13\x1a\x0b\x69\x54\x86\xdb\x99\xdc\x8e\x73\x5b\xb2\x68\x09\x3d\xa1\xf7\xf8\x6f\x99\xdb\x7a\xad\xc2\x9d\xf6\x60\xd6\x84\xcb\xde\x8b\x44\x86\xc8\x2d\xe9\x1a\x51\x38\x53\x67\x00\xd3\xed\xc2\x96\x7b\x33\x67\x00\xb3\xed\xbd\x45\x67\x4b\x54\x71\x33\xcd\x2c\x37\x13\x99\xdb\x6b\x53\xfa\x6d\x63\x28\x3c\x85\xa5\xf0\x64\xa6\x42\x33\x5b\xe1\x5b\x18\x0b\xdf\xc5\x5a\x68\xac\xe8\xa6\xde\xa2\xb1\x9e\x02\x8b\xb7\xd5\xa7\x6b\x27\x34\x4b\xc4\xbd\x1a\x57\x20\xc5\x84\xa9\xa4\xeb\xbc\x56\x08\x33\x99\x81\xce\x96\x2f\x05\xd3\x31\x18\x09\xda\x50\x65\x80\x82\xc0\xa2\xfc\xce\xfd\xdd\x69\xa5\xb8\x42\x93\x29\xd1\x70\xdd\x5b\xcb\x2c\xb5\xad\xb3\xc0\xa2\xf5\x0b\x04\x7f\x7c\x7d\x61\xd7\x87\xb3\x49\xf9\x47\x24\xc4\xea\xed\x76\xbf\x6e\xbb\xcb\xf6\x37\xf4\xaa\x29\xb5\x33\x2c\x47\x04\x11\xb9\x0f\x9d\xca\x27\x75\xa7\xaa\xa7\x8a\x90\xe5\x10\x70\xaa\xb5\x4f\x04\xcd\xc7\x54\x41\xf5\xc7\x65\x22\x47\xa5\xb1\x5e\x4e\xd8\x14\x43\xdb\xed\xd7\x9a\xe7\xfa\x61\xeb\x83\x32\x81\x6a\x6d\xbf\xd9\x81\x6b\xe1\x6d\xe9\x95\xba\xf4\x91\xe6\x58\x51\x11\xd6\xe3\xdb\x4f\x64\xf4\x19\x79\x20\x13\xb4\x34\x2d\x27\x5b\x62\xfb\x33\xb1\xb3\xed\xde\xd0\xa3\x8f\x1c\x7b\x21\xcb\xd7\xb0\x3e\x2c\x97\xaf\x5b\xf1\xaf\x42\x80\x72\xd6\x73\x75\x2c\x8b\x80\x6a\x24\xa0\x24\x47\x9f\x24\x94\x89\x96\xe8\x95\x2c\x76\xc4\x1d\x48\xee\xea\xc4\x95\x93\x89\x46\xe3\x9e\xc0\x72\x7d\x02\x76\x2e\x71\x03\x14\xa6\x39\x1d\xd6\x84\x88\x5c\x85\x29\x52\xe3\x93\x19\x30\x01\x37\x07\x3d\x38\xec\xc1\xd1\x6d\xc3\x81\xf2\x90\x4e\xa9\x58\x3f\x35\xfd\x96\x53\xe5\xc9\x71\x66\x8c\x14\x35\xe8\xb1\x11\x60\xa7\xc7\xf2\xc7\x50\xc0\x59\x70\x6f\x33\x50\x75\x90\xaa\x6d\x94\x3b\xf5\x0d\xf2\xc9\xea\x2e\xfd\xfe\x3b\x54\xdd\x75\x2c\xa9\x0a\x6f\xa6\xb7\x37\xb3\x5b\x18\xc1\x01\x69\x75\x6d\x9f\xd2\x4b\xe9\x79\xee\x1c\x38\x03\x70\xc6\x46\xb8\x21\x4e\x68\xc6\x8d\x1d\xa1\x0e\x6b\x19\x13\x13\x69\x05\x47\xb5\x40\x67\x41\x80\x5a\x3b\x8b\x9b\x2d\xb7\xbb\xe2\xad\xb2\x65\x94\x14\x91\x75\xae\x0b\x66\x82\xd8\xfe\x6e\x78\x64\xe3\x2b\x26\x36\x92\x5e\x19\x71\x8b\x18\x85\x4f\x0e\xc9\xe8\xcb\xd0\xb3\x5b\xdf\x6b\xe1\x88\x8c\x3e\x7e\xaf\x85\x65\xea\xaa\x72\x8e\xbe\xc5\x8a\x9d\xdc\x6d\x36\x76\x50\xc4\xab\x38\xb2\x83\x7a\x0d\x34\xde\xbc\x88\x0d\xa2\xf5\x0b\x09\xdb\x37\x0b\xd6\x7e\x78\xfc\xff\x6f\xd9\x69\xa6\x14\x0a\x03\x97\x99\x12\x83\x6d\xf0\x6d\x04\x49\x39\x9d\x35\xda\x83\x1d\x7c\xa8\xa1\x96\x88\x2c\x8f\xbf\xc2\x90\x36\x56\x6c\xd8\x59\xd2\x7f\x07\x55\xda\x0b\xfb\xc8\x41\x1d\x5c\x35\x16\x3f\x29\x38\xb4\x1f\xea\x75\x58\x21\x15\x91\x4d\xd0\x67\x26\x04\xaa\xbd\xa7\x87\x19\x2a\x5a\x34\x9b\x3c\x53\xb4\x68\x35\x58\xcb\x7f\x58\xc2\x95\x23\xf8\x4f\x03\x98\xcf\xab\x64\x8b\x2c\xb1\x22\xbd\x58\xfc\x79\x90\x9b\xba\xcf\x76\x3b\xb0\x1f\xdb\x54\xb1\x84\xaa\x59\xf9\x3e\xe6\xb6\xfd\xae\xf5\x87\xe5\x44\xda\xdd\x27\xa3\x5f\xb0\x00\xfb\xde\xfc\xc9\xf8\x6a\x73\x1e\x7a\x76\x78\xb1\x43\x8c\x57\xfd\x87\xee\x7f\x01\x00\x00\xff\xff\x79\x8f\xe3\x6e\xb2\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5042, mode: os.FileMode(436), modTime: time.Unix(1489792756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

